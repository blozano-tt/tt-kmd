#! /usr/bin/python3

"""
Test-build a kernel module against all kernel versions in a range of refs, or single git ref.

e.g. mass-build-test ttkmd linux v4.18 v6.3

Stops on first build failure.
"""

import argparse
import contextlib
from functools import lru_cache
import os
from pathlib import Path
import re
import subprocess
import sys
from typing import Optional, List

def path_search(name: str) -> Optional[Path]:
    path = os.getenv("PATH", ".")

    for path_dir in map(Path, path.split(":")):
        candidate = path_dir / name
        with contextlib.suppress(OSError):
            if candidate.is_file() and os.access(candidate, os.X_OK, effective_ids=os.supports_effective_ids):
                return candidate.absolute()

    return None

def path_search_or_else(name: str) -> Path:
    p = path_search(name)
    if p is None:
        raise FileNotFoundError(f"Could not find {name} in PATH.")
    return p

git = path_search_or_else("git")
make = path_search_or_else("make")

@lru_cache(1)
def make_j() -> str:
    core_count = len(os.sched_getaffinity(os.getpid()))
    return f"-j{core_count}"

# This merges stdout and stderr and returns them if successful.
# On failure CalledProcessError.stdout has the merged data.
def subprocess_check_output_merged(args: List[str], working_dir: Path) -> bytes:
    return subprocess.check_output(args, cwd=working_dir, stderr=subprocess.STDOUT)

def prepare_kernel(kernel_dir: Path, ver: str) -> bool:
    subprocess_check_output_merged([git, "clean", "-dfx"], kernel_dir)
    subprocess_check_output_merged([git, "reset", "--hard"], kernel_dir)
    subprocess_check_output_merged([git, "checkout", ver], kernel_dir)
    subprocess_check_output_merged([make, make_j(), "defconfig"], kernel_dir)
    subprocess_check_output_merged([make, make_j(), "modules_prepare"], kernel_dir)

def build_module(module_dir: Path, kernel_dir: Path) -> None:
    subprocess_check_output_merged([make, make_j(), "clean"], module_dir)

    # We're building against an incompletely-built kernel tree, so modpost can't find symbol versions.
    subprocess_check_output_merged([make, make_j(), f"KDIR={kernel_dir.absolute()}", "KBUILD_MODPOST_WARN=1"], module_dir)

version_tag_re = re.compile(rb"v\d+\.\d+")

def is_version_tag(tag: bytes) -> bool:
    return version_tag_re.fullmatch(tag)

def version_tags_between(kernel_dir: Path, start: str, end: str) -> List[str]:
    try:
        tag_output = subprocess.check_output([git, "tag", "--contains", start, "--no-contains", end, "--sort=creatordate"],
                                             cwd=kernel_dir, stderr=subprocess.PIPE)
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Failed to list tags between {start} and {end} in {kernel_dir}.\n" + e.stderr.decode(errors='replace'))

    # decode failure can't happen because is_version_tag only matches on ascii strings.
    found_tags = [ tag.decode('ascii') for tag in tag_output.splitlines() if is_version_tag(tag) ]

    try:
        if is_version_tag(end.encode('ascii')):
            found_tags.append(end)
    except UnicodeEncodeError:
        pass # Whatever it is, it's not a valid version tag.

    return found_tags

def test_one_build(module_dir: Path, kernel_dir: Path, ver: str) -> None:
    prepare_kernel(kernel_dir, ver)
    build_module(module_dir, kernel_dir)

def main() -> int:
    ap = argparse.ArgumentParser(epilog=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
    ap.add_argument("module_dir", type=Path)
    ap.add_argument("kernel_dir", type=Path)
    ap.add_argument("start_ver", help="git ref of first version to build.")
    ap.add_argument("end_ver", nargs="?", help="Last version to build (inclusive). If not present, only builds start_ver.")
    args = ap.parse_args()

    if args.end_ver is None:
        versions = [args.start_ver]
    else:
        versions = version_tags_between(args.kernel_dir, args.start_ver, args.end_ver)

    print("Testing versions:", ", ".join(versions))

    for v in versions:
        try:
            print(v)
            test_one_build(args.module_dir, args.kernel_dir, v)
        except subprocess.CalledProcessError as e:
            print(f"Build failed for {v}.")
            command = " ".join(map(str, e.cmd))
            print(f"{command} exited with code {e.returncode}.")
            if e.stdout:
                print("Its output follows:")
                print("=" * 72)
                print(e.stdout.decode(errors='replace'))
                print("=" * 72)
            return 1

    print("All builds passed.")

    return 0

sys.exit(main())
